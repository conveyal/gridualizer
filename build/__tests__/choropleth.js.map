{"version":3,"sources":["choropleth.js"],"names":["describe","it","breaks","expect","toEqual"],"mappings":";;AAEA;;AAEAA,SAAS,YAAT,EAAuB,YAAM;AAC3BC,KAAG,iCAAH,EAAsC,YAAM;AAC1C,QAAMC,SAAS,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,CAAf;;AAEAC,WAAO,+BAAc,CAAd,EAAiBD,MAAjB,CAAP,EAAiCE,OAAjC,CAAyC,CAAzC,EAH0C,CAGE;AAC5CD,WAAO,+BAAc,EAAd,EAAkBD,MAAlB,CAAP,EAAkCE,OAAlC,CAA0C,CAA1C,EAJ0C,CAIG;AAC7CD,WAAO,+BAAc,EAAd,EAAkBD,MAAlB,CAAP,EAAkCE,OAAlC,CAA0C,CAA1C,EAL0C,CAKG;AAC7CD,WAAO,+BAAc,EAAd,EAAkBD,MAAlB,CAAP,EAAkCE,OAAlC,CAA0C,CAA1C;AACAD,WAAO,+BAAc,EAAd,EAAkBD,MAAlB,CAAP,EAAkCE,OAAlC,CAA0C,CAA1C,EAP0C,CAOG;AAC9C,GARD;AASD,CAVD,E,CAJA","file":"choropleth.js","sourcesContent":["/* global describe, it, expect */\n\nimport {getClassIndex} from '../choropleth'\n\ndescribe('choropleth', () => {\n  it('should compute breaks correctly', () => {\n    const breaks = [10, 20, 30, 40]\n\n    expect(getClassIndex(5, breaks)).toEqual(0) // below first break, first class\n    expect(getClassIndex(25, breaks)).toEqual(2) // below breaks[2], which is 30\n    expect(getClassIndex(30, breaks)).toEqual(2) // inclusive\n    expect(getClassIndex(35, breaks)).toEqual(3)\n    expect(getClassIndex(41, breaks)).toEqual(3) // clamp\n  })\n})\n"]}