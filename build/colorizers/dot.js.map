{"version":3,"sources":["dot.js"],"names":["DotColorizer","breaks","colors","colorizer","density","r","Math","random","normalize"],"mappings":";;;;;AAAA;;;;;;AAMA,IAAMA,eAAe,SAAfA,YAAe,CAACC,MAAD,EAASC,MAAT,EAAoB;AACvC,MAAIC,YAAY,SAAZA,SAAY,CAACC,OAAD,EAAa;AAC3B;AACA,QAAIA,UAAU,CAAd,EAAiB,OAAO,CAAC,GAAD,EAAM,CAAN,EAAS,CAAT,EAAY,GAAZ,CAAP;AACjB,QAAMC,IAAIC,KAAKC,MAAL,EAAV,CAH2B,CAGH;AACxB,QAAIF,IAAID,OAAR,EAAiB,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,GAAV,CAAP,CAAjB,KACK,OAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAP;AACN,GAND;AAOA;AACAD,YAAUK,SAAV,GAAsB,IAAtB;AACA,SAAOL,SAAP;AACD,CAXD;;kBAaeH,Y","file":"dot.js","sourcesContent":["/**\n * This dot colorizer ignores the list of color breaks.\n * The caller should pass in a probability in the range [0..1] that this will draw a dot.\n * In our use, this probability is constrained so on average each dot represents a number of\n * opportunities greater than one.\n */\nconst DotColorizer = (breaks, colors) => {\n  var colorizer = (density) => {\n    // Highlight outliers that are probably bad input data\n    if (density > 2) return [255, 0, 0, 200]\n    const r = Math.random() // range 0..1\n    if (r < density) return [0, 0, 0, 200]\n    else return [0, 0, 0, 0]\n  }\n  // Indicate to callers that this colorizer expects its inputs to be normalized to the range [0..1]\n  colorizer.normalize = true\n  return colorizer\n}\n\nexport default DotColorizer\n"]}