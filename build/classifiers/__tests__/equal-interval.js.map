{"version":3,"sources":["equal-interval.js"],"names":["mockGrid","min","max","data","describe","it","expect","toMatchSnapshot","scale","domain","clamp"],"mappings":";;AAEA;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,WAAW;AACfC,OAAK,CADU;AAEfC,OAAK,IAFU;AAGfC,QAAM,qBAAM,CAAN,EAAS,IAAT;AAHS,CAAjB,C,CAPA;;AAaAC,SAAS,8BAAT,EAAyC,YAAM;AAC7CC,KAAG,mCAAH,EAAwC,YAAM;AAC5CC,WAAO,+BAAgBN,QAAhB,EAA0B,CAA1B,CAAP,EAAqCO,eAArC;AACD,GAFD;;AAIAF,KAAG,sCAAH,EAA2C,YAAM;AAC/C,QAAMG,QAAQ,yBACXC,MADW,CACJ,CAAC,CAAD,EAAI,IAAJ,CADI,EAEXC,KAFW,CAEL,IAFK,CAAd;;AAIAJ,WAAO,6BAAc,EAAEE,YAAF,EAAd,EAAyBR,QAAzB,EAAmC,CAAnC,CAAP,EAA8CO,eAA9C;AACD,GAND;AAOD,CAZD","file":"equal-interval.js","sourcesContent":["/* global describe, it, expect */\n\nimport {scaleLog} from 'd3-scale'\nimport range from 'lodash/range'\n\nimport equalInterval from '../equal-interval'\n\nconst mockGrid = {\n  min: 0,\n  max: 1000,\n  data: range(0, 1001)\n}\n\ndescribe('classifiers > equal-interval', () => {\n  it('should handle a linear classifier', () => {\n    expect(equalInterval()(mockGrid, 5)).toMatchSnapshot()\n  })\n\n  it('should handle a nonlinear classifier', () => {\n    const scale = scaleLog()\n      .domain([1, 1000])\n      .clamp(true)\n\n    expect(equalInterval({ scale })(mockGrid, 5)).toMatchSnapshot()\n  })\n})\n"]}