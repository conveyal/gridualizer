{"version":3,"sources":["quantile.js"],"names":["describe","it","data","Int32Array","i","length","expect","min","max","toEqual","noDataValue"],"mappings":";;AAEA;;;;;;AAEAA,SAAS,wBAAT,EAAmC,YAAM;AACvCC,KAAG,aAAH,EAAkB,YAAM;AACtB,QAAMC,OAAO,IAAIC,UAAJ,CAAe,IAAf,CAAb;AACA;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,KAAKG,MAAzB,EAAiCD,GAAjC;AAAsCF,WAAKE,CAAL,IAAUA,IAAI,EAAd;AAAtC,KACAE,OAAO,wBAAS,EAAT,EAAa,EAAEJ,UAAF,EAAQK,KAAK,CAAb,EAAgBC,KAAK,CAArB,EAAb,EAAuC,CAAvC,CAAP,EAAkDC,OAAlD,CAA0D,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAA1D;AACD,GALD;;AAOAR,KAAG,6BAAH,EAAkC,YAAM;AACtC,QAAMC,OAAO,IAAIC,UAAJ,CAAe,IAAf,CAAb;AACA;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,KAAKG,MAAzB,EAAiCD,GAAjC;AAAsCF,WAAKE,CAAL,IAAUA,IAAI,CAAd;AAAtC,KAHsC,CAItC;AACAE,WAAO,wBAAS,EAAEI,aAAa,CAAf,EAAT,EAA6B,EAAER,UAAF,EAAQK,KAAK,CAAb,EAAgBC,KAAK,CAArB,EAA7B,EAAuD,CAAvD,CAAP,EAAkEC,OAAlE,CAA0E,CAAC,CAAD,EAAI,CAAJ,CAA1E;AACD,GAND;AAOD,CAfD,E,CAJA","file":"quantile.js","sourcesContent":["/* global describe, it, expect */\n\nimport quantile from '../quantile'\n\ndescribe('classifiers > quantile', () => {\n  it('should work', () => {\n    const data = new Int32Array(1000)\n    // spread into 10 classes evenly\n    for (let i = 0; i < data.length; i++) data[i] = i % 10\n    expect(quantile({})({ data, min: 0, max: 9 }, 5)).toEqual([2, 4, 6, 8, 9])\n  })\n\n  it('should handle no data value', () => {\n    const data = new Int32Array(1000)\n    // spread into 5 classes evenly\n    for (let i = 0; i < data.length; i++) data[i] = i % 5\n    // 3, 4 because 4 is the max, and there are as many values < 3 as there are >= 3, because 2 is excluded\n    expect(quantile({ noDataValue: 2 })({ data, min: 0, max: 4 }, 2)).toEqual([3, 4])\n  })\n})\n"]}