{"version":3,"sources":["ckmeans.js"],"names":["ckmeans","noDataValue","grid","nBreaks","maxLength","filtered","data","filter","i","length","sample","Int32Array","generator","west","north","width","height","random","clusters","breaks","cluster"],"mappings":";;;;;;AAAA;;AACA;;;;;;AAEA;;;;;;AAMA,IAAMA,UAAU,SAAVA,OAAU;AAAA,8BAAGC,WAAH;AAAA,MAAGA,WAAH,oCAAiB,IAAjB;AAAA,SAA4B,UAACC,IAAD,EAAOC,OAAP,EAAmB;AAC7D;AACA,QAAMC,YAAY,KAAlB;AACA;AACA,QAAIC,WAAWH,KAAKI,IAAL,CAAUC,MAAV,CAAiB;AAAA,aAAKC,MAAM,CAAN,IAAWA,MAAMP,WAAtB;AAAA,KAAjB,CAAf;AACA,QAAII,SAASI,MAAT,GAAkBL,SAAtB,EAAiC;AAC/B,UAAMM,SAAS,IAAIC,UAAJ,CAAeP,SAAf,CAAf;AACA,UAAMQ,YAAY,0BAAa,CAACV,KAAKW,IAAN,EAAYX,KAAKY,KAAjB,EAAwBZ,KAAKa,KAA7B,EAAoCb,KAAKc,MAAzC,CAAb,CAAlB;AACA,WAAK,IAAIR,IAAI,CAAb,EAAgBA,IAAIJ,SAApB,EAA+BI,GAA/B,EAAoC;AAClCE,eAAOF,CAAP,IAAYH,SAAUO,UAAUK,MAAV,KAAqBZ,SAASI,MAA/B,GAAyC,CAAlD,CAAZ;AACD;AACDJ,iBAAWK,MAAX;AACD;AACD,QAAMQ,WAAW,uBAAUb,QAAV,EAAoBF,OAApB,CAAjB;AACA,QAAMgB,SAAS,EAAf;AACA,SAAK,IAAIX,KAAI,CAAb,EAAgBA,KAAIL,OAApB,EAA6BK,IAA7B,EAAkC;AAChC,UAAMY,UAAUF,SAASV,EAAT,CAAhB;AACAW,aAAOX,EAAP,IAAYY,QAAQA,QAAQX,MAAR,GAAiB,CAAzB,CAAZ;AACD;AACD,WAAOU,MAAP;AACD,GApBe;AAAA,CAAhB;;kBAsBenB,O","file":"ckmeans.js","sourcesContent":["import { constructor as XorShift } from 'xorshift'\nimport ssCkmeans from 'simple-statistics/src/ckmeans'\n\n/**\n * Tom McWright did some punch-card archaeology to reimplement the Jenks Breaks method\n * in his simple-statistics library. This Ckmeans method supersedes the Jenks method,\n * especially since Ckmenas 3.4.6 improves runtime from O(kn^2) to O(kn log(n)).\n * https://simplestatistics.org/docs/#ckmeans\n */\nconst ckmeans = ({ noDataValue = null }) => (grid, nBreaks) => {\n  // On big data sets, cluster a random sample of the data to keep run time reasonable.\n  const maxLength = 10000\n  // Filtering out the zeros seems to give more nuanced breaks. There are a huge amount of zeros.\n  let filtered = grid.data.filter(i => i !== 0 && i !== noDataValue)\n  if (filtered.length > maxLength) {\n    const sample = new Int32Array(maxLength)\n    const generator = new XorShift([grid.west, grid.north, grid.width, grid.height])\n    for (let i = 0; i < maxLength; i++) {\n      sample[i] = filtered[(generator.random() * filtered.length) | 0]\n    }\n    filtered = sample\n  }\n  const clusters = ssCkmeans(filtered, nBreaks)\n  const breaks = []\n  for (let i = 0; i < nBreaks; i++) {\n    const cluster = clusters[i]\n    breaks[i] = cluster[cluster.length - 1]\n  }\n  return breaks\n}\n\nexport default ckmeans\n"]}