{"version":3,"sources":["choropleth.js"],"names":["ReactChoropleth","props","grid","breaks","colors","labels","leafletElement","nextProps","colorsEqual","length","find","c","i","undefined","layerContainer","removeLayer","addLayer","propTypes","object","isRequired","func","array","number"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;;;AACA;;AACA;;;;IAEqBA,e;;;;;;;;;;yCAQG;AACpB;AADoB,mBAEqB,KAAKC,KAF1B;AAAA,UAEZC,IAFY,UAEZA,IAFY;AAAA,UAENC,MAFM,UAENA,MAFM;AAAA,UAEEC,MAFF,UAEEA,MAFF;AAAA,UAEUC,MAFV,UAEUA,MAFV;;AAGpB,WAAKC,cAAL,GAAsB,yBAAeJ,IAAf,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,MAArC,CAAtB;AACD;;;0CAEsBE,S,EAAW;AAAA,oBACC,KAAKN,KADN;AAAA,UACxBC,IADwB,WACxBA,IADwB;AAAA,UAClBC,MADkB,WAClBA,MADkB;AAAA,UACVC,MADU,WACVA,MADU;;AAGhC;;AACA,UAAII,cAAcJ,WAAWG,UAAUH,MAAvC;;AAEA,UAAI,CAACI,WAAD,IAAgBJ,UAAU,IAA1B,IAAkCG,UAAUH,MAAV,IAAoB,IAA1D,EAAgE;AAC9D,YAAIA,OAAOK,MAAP,KAAkBF,UAAUH,MAAV,CAAiBK,MAAvC,EAA+C;AAC7C;AACA;AACAD,wBAAcJ,OAAOM,IAAP,CAAY,UAACC,CAAD,EAAIC,CAAJ;AAAA,mBAAUR,OAAOQ,CAAP,MAAcL,UAAUH,MAAV,CAAiBQ,CAAjB,CAAxB;AAAA,WAAZ,MAA6DC,SAA3E;AACD;AACF;;AAED,aAAOX,SAASK,UAAUL,IAAnB,IAA2BC,WAAWI,UAAUJ,MAAhD,IAA0D,CAACK,WAAlE;AACD;;;yCAEqB;AACpB,WAAKM,cAAL,CAAoBC,WAApB,CAAgC,KAAKT,cAArC;AADoB,oBAEqB,KAAKL,KAF1B;AAAA,UAEZC,IAFY,WAEZA,IAFY;AAAA,UAENC,MAFM,WAENA,MAFM;AAAA,UAEEC,MAFF,WAEEA,MAFF;AAAA,UAEUC,MAFV,WAEUA,MAFV;;AAGpB,WAAKC,cAAL,GAAsB,yBAAeJ,IAAf,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,MAArC,CAAtB;AACA,WAAKS,cAAL,CAAoBE,QAApB,CAA6B,KAAKV,cAAlC;AACD;;;2BA1CH;;AAMqBN,e,CACZiB,S,GAAY;AACjBf,QAAM,iBAAUgB,MAAV,CAAiBC,UADN;AAEjBhB,UAAQ,iBAAUiB,IAFD;AAGjBhB,UAAQ,iBAAUiB,KAHD;AAIjBhB,UAAQ,iBAAUiB;AAJD,C;kBADAtB,e","file":"choropleth.js","sourcesContent":["/** React-leaflet component for a choropleth map */\n\nimport Choropleth from '../choropleth'\nimport {MapLayer} from 'react-leaflet'\nimport {PropTypes} from 'react'\n\nexport default class ReactChoropleth extends MapLayer {\n  static propTypes = {\n    grid: PropTypes.object.isRequired,\n    breaks: PropTypes.func,\n    colors: PropTypes.array,\n    labels: PropTypes.number\n  }\n\n  componentWillMount () {\n    super.componentWillMount()\n    const { grid, breaks, colors, labels } = this.props\n    this.leafletElement = new Choropleth(grid, breaks, colors, labels)\n  }\n\n  shouldComponentUpdate (nextProps) {\n    const { grid, breaks, colors } = this.props\n\n    // deep equal the colors\n    let colorsEqual = colors === nextProps.colors\n\n    if (!colorsEqual && colors != null && nextProps.colors != null) {\n      if (colors.length === nextProps.colors.length) {\n        // if we find no colors that don't equal each other, set colorsEqual=true\n        // colorsEqual is already false\n        colorsEqual = colors.find((c, i) => colors[i] !== nextProps.colors[i]) === undefined\n      }\n    }\n\n    return grid !== nextProps.grid || breaks !== nextProps.breaks || !colorsEqual\n  }\n\n  componentDidUpdate () {\n    this.layerContainer.removeLayer(this.leafletElement)\n    const { grid, breaks, colors, labels } = this.props\n    this.leafletElement = new Choropleth(grid, breaks, colors, labels)\n    this.layerContainer.addLayer(this.leafletElement)\n  }\n}\n"]}